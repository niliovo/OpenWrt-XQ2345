#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt with lede
# Source code repository: https://github.com/coolsnowwolf/lede / Branch: master
#=====================================================================================

name: Build OpenWrt with lede

on:
#  schedule:
#    - cron: "21 19 * * 0"
  watch:
    types: started
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_soc:
        description: "Select Amlogic SoC"
        required: false
        default: "s912"
        type: choice
        options:
          - all
          - s905x3_s905d_s912
          - a311d
          - s922x
          - s922x-n2
          - s922x-reva
          - s905x3
          - s905x2
          - s905x2-km3
          - s912
          - s912-m8s
          - s905d
          - s905d-ki
          - s905x
          - s905w
          - s905
          - s905l3a
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.1.3"
        type: choice
        options:
          - 6.1.3
          - 6.1.2
          - 6.0.17
          - 6.0.16
          - 5.15.86
          - 5.15.85
          - 5.10.162
          - 5.10.161
          - 5.4.228
          - 5.4.227
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "https://github.com/ophub/kernel/tree/main/pub"
      openwrt_size:
        description: "Set the rootfs size(Unit: MiB)."
        required: false
        default: "1024"

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: router-config/lede-master/feeds.conf.default
  CONFIG_FILE: router-config/lede-master/.config
  DIY_P1_SH: router-config/lede-master/diy-part1.sh
  DIY_P2_SH: router-config/lede-master/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_GOFILE: true
  UPLOAD_ANONFILE: true
  UPLOAD_TRANSFER: true
  UPLOAD_RELEASE: false
  GENERATE_RELEASE: true
  REMOVE_OLD_RELEASE: true
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get -qq update -y
          sudo -E apt-get -qq full-upgrade -y
          sudo -E apt-get -qq install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E apt-get -qq install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq install -y mount util-linux uuid-runtime fdisk parted dosfstools e2fsprogs btrfs-progs pigz libarchive-tools attr f2fs-tools acpid coreutils gawk pv tar
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "${TZ}"
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone source code
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone --depth 1 ${REPO_URL} -b ${REPO_BRANCH} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

      - name: Load custom feeds
        run: |
          [[ -e "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a -f

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "build_tag=OpenWrt_Aml_lede_$(date +"%m.%d.%H%M")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean up server space
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
          df -hT ${PWD}

      - name: Build OpenWrt firmware
        if: steps.compile.outputs.status == 'success' && !cancelled()
        uses: niliovo/OpenWrt-XQ2345@main
        with:
          openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          openwrt_size: ${{ inputs.openwrt_size }}

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd /home/runner/work/_actions/niliovo/OpenWrt-XQ2345/main/out
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "TARGET=$PWD/*" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to gofile
        id: gofile
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_GOFILE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer gof --no-progress ${FIRMWARE} 2>&1 | tee gofile.log
          echo "::warning file=gofile.io::$(cat gofile.log | grep https)"
          echo "::set-output name=url::$(cat gofile.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to anonfile
        id: anonfile
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_ANONFILE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer anon --no-progress ${TARGET} 2>&1 | tee anonfile.log
          echo "::warning file=anonfile.com::$(cat anonfile.log | grep https)"
          echo "::set-output name=url::$(cat anonfile.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to transfer
        id: transfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_TRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer trs --no-progress ${TARGET} 2>&1 | tee transfer.log
          echo "::warning file=transfer.sh::$(cat transfer.log | grep https)"
          echo "::set-output name=url::$(cat transfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.GENERATE_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_GOFILE = true ] && echo "ðŸ”— [Gofile](${{ steps.gofile.outputs.url }})" >> release.txt
          [ $UPLOAD_ANONFILE = true ] && echo "ðŸ”— [Anonfile](${{ steps.anonfile.outputs.url }})" >> release.txt
          [ $UPLOAD_TRANSFER = true ] && echo "ðŸ”— [Transfer](${{ steps.transfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload OpenWrt Firmware to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success'&& env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          tag: OpenWrt_Aml_lede_${{ env.PACKAGED_OUTPUTDATE }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            This is OpenWrt firmware for Amlogic s9xxx tv box
            * Firmware information
            Default IP: 192.168.8.1
            Default username: root
            Default password: password
            Default WIFI name: OpenWrt
            Default WIFI password: none
            Install to EMMC: Login to OpenWrt â†’ System â†’ Amlogic Service â†’ Install OpenWrt

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.REMOVE_OLD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
